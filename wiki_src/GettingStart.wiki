<!-- ======================================================================================-->
<!-- File         : GettingStart.wiki-->
<!-- Author       : Wu Jie -->
<!-- Last Change  : 05/29/2009 | 17:14:22 PM | Friday,May-->
<!-- Description  : -->
<!-- ======================================================================================-->

= Getting Start =

== Create ".vimentry" File ==
--------------------------------------------------------------------------------------

To start up exVim, you need to create a file with suffix ".vimentry" under your project's
root directory. For instance, you have a project named "MyProject" in d:\Projects\MyProject, 
you should create "MyProject.vimentry" in d:\Projects\MyProject, then run the file by vim.
You may see a scene as the picture shows: 

[[res/exVim.windows.png]]

The main page contains the contents of vimentry files you create, it is generated 
automatically by script at the first time you open the file. We also call this window 
edit-window. You can change the settings in it, and it will load your settings every 
time you save or open it. But custom the vimentry file is not recommanded for beginner. 
We will discuss vimentry file customization in the chapter of exEnvironment.

The project window is on the left of the edit window. I'll introduce it in next section.

And you can see the "Mini Buf Explorer" window if you install the minibufffer plugin.
( I recommand you to install the patched version of minibuffer scripts, and take the 
settings in _exvimrc )

== Create & Upate Project ==
--------------------------------------------------------------------------------------

=== Generate Project Files ===

Move your cursor to the project-window, then press \C (`<leader>`C). Then you will see 
three input dialog ask you fill root directory, file filters and sub-directory name 
filters of the project. We keep them as default.

(*NOTE:* the \C here means first press key `\`, then press `shift + c` ( which means the 
uppercase "c"), it is important to known that vim's operations is case sensitive ).

[[res/create.project.png]]

Once you finish the dialog, the exProject plugin start browsing and generating files 
recursively from the root directory of your project. When finish, the project window will 
shows files as the pciture below. Save the project file by type :w, then you can open & edit 
files by press `<Enter>` on the files in project-window.

[[res/create.project.done.png]]

=== Generate tags,ID... ===

After you generate files in project window and save it, you will see MyProject.exproject, 
id-lang-autogen.map and filenametags in `.vimfiles` directory. Now we will generate the 
rest of files for project. Type `:Up[date]` in the vim we opened above, the command will 
create a quick_gen_project_auto.(bat\|sh) in our project root directory and running it to 
generate files used by exVim plugins, whiches are tags, ID, symbol, cscope-files, inherits 
and so on. If everyting setup correctly -- the ctags,mkid,lid,gaw,cscope commands are available, 
you should saw a scene similar like the picture: 

[[res/running.quick.gen.project.png]]

=== Update Project ===

Most of the files in `.vimfiles` directory used by exVim plugins don't have incremental 
update method, so once you modified your codes in the project, you want the modification 
added into tags, ID and so on, you need to update the file manually, and it will update 
the whole file. Type `:Up[date]` will update all project files in `.vimfiles` directory. 

Also you can update specific file by giving an argument in `:Up[date]` command. The options are: 
ID, symbol, inherit, tag and cscope. 

During the update, you can still edit files, jump tags, global search key words cause 
the update programme won't change the files unless it finished.

== Basic Concept ==
--------------------------------------------------------------------------------------

=== Concept of different windows ===

Before we introduce basic operation, let's learn some concepts so we can have a better 
understand how exVim works. exVim divide windows into tree types:

1. ex-plugin window:

the window will keep a buffer create by ex plugins/scripts, also it will register the 
buffer name into g:ex_plugin_registered_bufnames automatically, so that system can know 
this is a window/buffer for plugin.

2. register-plugin window:

the window is create by other plugins/scripts, but you know the buffer name it created, 
and manually register the buffer name into g:ex_plugin_registered_bufnames.  At this 
point the system also know is the window a plugin window.  It is useful for plugin like 
MiniBufExplorer or Taglist, they have a fixed buffer in a window it created. Here is 
some of my register value: 

{{{
let g:ex_plugin_registered_bufnames = ["-MiniBufExplorer-","__Tag_List__","\[Lookup File\]"] 
}}}
    
3. edit window:

Those window not in the g:ex_plugin_registered_bufnames will treat as edit window. And the 
last edit window will be recorded, so that you can jump or open new buffer in that window 
while you are operate in ex-plugin/register-plugin window

The picture below shows the term of different windows in exVim:

[[res/concept.of.different.window.png]]

=== Concept of ex-plugin window ===

Most ex-plugins have two to three window, but the main window which list results for selecting 
always called 'select-window', And the window which list results from filter process always 
called 'quickview-window'. 

=== Concept of the position of ex-plugin window ===

Different ex-plugin windows can be showed at the same time if they don't use same window 
positoin. If a window of ex-plugin opened in a position that exsits another ex-plugin window,
the old one will be closed.   

The picture below shows what will a new ex-plugin window be opened when there exists a ex-plugin
window in same direction:

[[res/concept.of.window.position.png]]

== Basic Operation ==
--------------------------------------------------------------------------------------

Now you know how to create and update project, let's try some basic commands. (*NOTE:* the 
maps I recommend below are default mappings write in the vimrc file in the install-package, 
you can choose to copy or source the rc to use name) 

=== exTagSelect ===

||*Operation/Command* ||*Explanation* ||
||`\ts` ||Open the exTagSelect select-window ||
||`\]` or `\tg` ||Search current word in tags, and show the search result in "tag select" window ||

Check section [[exTagSelect]] for detail.

=== exSymbolTable ===

||*Operation/Command* ||*Explanation* ||
||`\ss` ||Open the exSymbolTable select-window, which list all symbol names in it. You can search the symbol you want directly by using / or #. ||
||`\r` ||After you confirm the search (by / or #), use this operation to list all matched search results. ||
||`\sq` ||Open the exSymbolTable quickview-window. ||
||`\sg` ||Search and filter current word in exSymbolTable select-window, list the matched result in quickview-window. ||

Check section [[exSymbolTable]] for detail.

=== exGlobalSearch ===

||*Operation/Command* ||*Explanation* ||
||`\gg` ||Search current word as text in entire project, and list the results in global search select-window. Currently we use id-utils as our global search engine. ||
||`\gs` ||Open the exGlobalSearch select-window. ||
||`\gq` ||Open the exGlobalSearch quickview-window. ||

When you get the global search result, you have several options to help you filter 
result.  It is similar like the filter method in exSymbolTable ( actually, the ex plugin 
series share similar way to process filtering search results ). And the picture below
shows you different filter sections you will learn later.

[[res\global.search.sections.png]]

Press `<enter>` will let you jump to the result directly.

Search another pattern in the exGlobalSearch plugin window by / or #, when you confirm search, you can filter results by typing:

||*Operation/Command* ||*Explanation* ||
||`\r` ||Pick up results in {preview-section} matched the pattern you gived, and list them in quickview-window. ||
||`\d` ||Pick up results in {preview-section} unmatched patterns you gived, and list them in quickview-window. ||
||`\fr` ||Pick up results in {file-section} matched the pattern you gived, and list them in quickview-window. ||
||`\fd` ||Pick up results in {file-section} unmatched patterns you gived, and list them in quickview-window. ||
||`\gr` ||Pick up results in all sections matched the pattern you gived, and list them in quickview-window. ||
||`\gd` ||Pick up results in all sections unmatched patterns you gived, and list them in quickview-window. ||

Check section [[exGlobalSearch]] for detail.

=== exCscope ===

||*Operation/Command* ||*Explanation* ||
||`F2` ||Find files #including this file, and list the result in exCscope select-window. ||

Check section [[exCscope]] for detail.

=== exMarksBrowser ===

||*Operation/Command* ||*Explanation* ||
||`\ms` ||Open the exMarksBrowser select-window, shows marks user defined and let user jump to it. ||

Check section [[exMarksBrowser]] for detail.

=== exUtility ===

||*Operation/Command* ||*Explanation* ||
||`\<TAB>` ||Switch between ex-plugin window and current edit window. ||
||`\<ESC>` ||Close ex-plugin window when in edit window. ||
||`<ctrl-TAB>` ||Swap buffer between current and last edit buffer. ||
||`\bd` ||Close current edit buffer and keep the window. ||
||`<alt-1>`, `<alt-2>`, `<alt-3>`, `<alt-4>` ||Hilight words or visual blocks with highlight color 1,2,3,4. ||
||`<alt-0>` ||Cancle all 1,2,3,4 highlights ||
||`F12`,`{visual}F12` ||Insert '#if 0' and '#endif' between visual selected block in visual mode. Remove '#if 0' and '#endif' between it in normal mode. ||
||`\gv` ||Use current word as class name, draw the class inherits graphic and open it by image viewer application you give.  The picture will be saved in `.vimfiles\.hierarchies\current_word.png`. ||

Check section [[exUtility]] for detail.

*NOTE:* 
When you use :q to unload a buffer, it will close the window for that buffer,too. That 
will lead to orderless windows at the end. `\bd` is designed to solve the problem.  
Check `issue #1` in [[KnownIssues|Known Issues]] for more detail.

*NOTE:*
The image viewer used in `\gv` can be defined by set `g:exES_ImageViewer` in `.vimrc`. The default value is:

{{{
let g:exES_ImageViewer = 'd:\exDev\IrfanView\i_view32.exe'
}}}
