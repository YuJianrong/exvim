<!-- ======================================================================================-->
<!-- File         : SetupVimentry.wiki-->
<!-- Author       : Wu Jie -->
<!-- Last Change  : 05/23/2009 | 11:01:13 AM | Saturday,May-->
<!-- Description  : -->
<!-- ======================================================================================-->

= Setup vimentry =

== Syntax in vimentry file ==
--------------------------------------------------------------------------------------

When you create a new ".vimentry" file, and open it, there always have some values
automatically fill in the file. exVim then will parse these value into vimscript as global 
variables. You can define two types of variables in vimentry ---- the normal variable and 
the list. By the syntax below:

{{{
Variable1='this is a normal variable'

List1+='item1'
List1+='item2'
List1+='item3'
}}}

The "=" will tells exVim the line contains a normal variable, and "+=" will tells exVim
that the line contains a list variable.

After reading from the file, exVim will create the variables with prefix "g:exES_".
For example the `Variable1` above will be `g:exES_Variable1` in the vimscript.

*NOTE:* the value in vimentry file always be parsed as string.

== vimentry file update ==
--------------------------------------------------------------------------------------

At the beginning, when you create a ".vimentry" file, exVim will write a default template, 
which contains default value settings. The value settings separate into several sections. 
The first one is the "-- auto-gen settings --" section, you probably see the section like 
below:

{{{
-- auto-gen settings (DO NOT MODIFY) --

CWD=D:/Project/Dev/exUtility/src/exLibs
Version=21
VimEntryName=exLibs
VimfilesDirName=_vimfiles_exLibs
}}}

You are not allow to change the value in it. Everytime you open the vimentry file, the 
exVim will load the section, and check if it is consist with settings in exVim, if not, 
it will force exVim rewrite the vimentry file and update it.

The conditions to force the exVim rewrite and update the vimentry are:
 * CWD is not the same with the folder path of vimentry file.
 * Version is not the same with the version define in exVim (s:exES_CurrentVersion).
 * VimEntryName is not the same with the name of the vimentry file
 * When clean up the text in vimentry file, and save it by `:w`.

When you edit the vimentry file, and save it by :w, the exEnvironment will detect and 
re-parse the variables. 

== vimentry settings ==
--------------------------------------------------------------------------------------

Most variables in vimentry files are relate with file name or path. You can change them  
to fit your own project. But there also have some settings that will change the behavior
of exVim.

*- LangType*

The default value is "auto", which means the the language type of the project will be set
automatically by the file type filter (s:ex_project_file_filter, set by exProject). You can
specific your own language type by the syntax:

{{{
LangType=lang1,lang2,lang3
}}}

The `LangType` will be used in quick_gen_project batch/shell file, and will let the project 
update by specific language you define.

The options are:
{{{
c,cpp,c#,shader,python,vim,math,uc,javascript,java,html,lua
}}}

*- vimentryRefs*

This is a list used to reference other vimentry into current project. It will let you be 
able to use the tags, symbol and inherit in reference vimentry. 

To make it works, you need to add the path of the referenced vimentry file.

*- Restore Buffer*

You can save all opened buffers when you exit exVim, and restore them at next time you open
the project. By set "RestoreBuffer=true" you are able to restore last edit buffers. 

When you open the project, it will check if restore buffers, and if you set "AskForRestoration=true",
exVim will ask you if restore buffers every time you open the vimentry project. You can disable
the asking dialog by set the value to false.

== auto-generated project files ==
--------------------------------------------------------------------------------------

When you open the vimentry, it will doing the things follow the order below:

 # Check if need to re-write the vimentry settings template
 # Parse all settings into vimscript, and generate global variables
 # Create `_vimfiles_${VimEntryName}` folder ( NOTE: the `${VimEntryName}` is the name of your vimentry file )
 # Create `id-lang-autogen.map` in `_vimfiles_${VimEntryName}`
 # Create `quick_gen_project_${VimEntryName}_autogen.bat` ( NOTE: in unix/linux, it is .sh )  
 # Create `quick_gen_project_${VimEntryName}_pre_custom.bat` and `quick_gen_project_${VimEntryName}_post_custom.bat` in `_vimfiles_${VimEntryName}` ( NOTE: in unix/linux, it is .sh )  

The `_vimfiles_${VimEntryName}` folder will includes all project files generated by 
exVim in it. It is important to make it have `_${VimEntryName}` follow the `_vimfiels` since
we can have different vimentry files under the same folder, we have to distinguish their files
by this way.

The `id-lang-autogen.map` is used by id-utils, which will be our global search engine. The
file includes the filetype filters used for id-utils which come from the filter settings 
in exProject. The id-utils will uses the id-lang map in exVim by the order of:

 # check if there have a file named in id-lang-custom.map in `_vimfiles_${VimEntryName}`, if have use it, and skip the following step.
 # check if there have a file named in id-lang-autogen.map in `_vimfiles_${VimEntryName}`, if have use it, and skip the following step.
 # check if there have a file named in id-lang.map in `${VIM}/toolkit/idutils/`, if not, report an error.

So with the rule above, you still have chance to custom your own id-lang.map if you wish.

The `quick_gen_project_${VimEntryName}_autogen` is the shell programme to invoke exVim update 
the project. You can run it outside exVim or use :Up[date] command in exVim to trigger it. 
After that it will update the project by the way we define. 

The code writting in `quick_gen_project_${VimEntryName}_autogen` can't be changed, cause the 
changes will be overwrite in next you use :Up[date] command. exVim provide 2 different way to
let you doing custom script. 

1: You can find `quick_gen_project_${VimEntryName}_pre_custom.bat` and `quick_gen_project_${VimEntryName}_post_custom.bat` 
in `_vimfiles_${VimEntryName}` the first time you create a ".vimentry" file. When you run the
`quick_gen_project_${VimEntryName}_autogen`, it will first running the `xxx_pre_custom.bat`,
then running the main shell script, finally running the `xxx_post_custom.bat`. So you can do
your changes in these two files to fulfill your demand. I strongly recommend to use this way 
to custom your update script, since the `_autogen` may changes when you changes the settings in 
vimentry.

2: If you think the whole `_autogen.bat` shells can't satisfy your needed,  you could put a shell 
programme named `quick_gen_project_${VimEntryName}_custom` in the same path, so the :Up[date] 
command will skip the `_autogen` one and run the `_custom` directly. 

(*NOTE:* do not change those "autogen" files or you will loose your work next time you 
trigger them in exVim. The better way is copy and rename them into a "custom" version. )

== quick edit vimentry file ==
--------------------------------------------------------------------------------------

By putting the mapping below into your `_vimrc`, you can open the vimentry file of current
project immediately by press `\ve`.

{{{
nnoremap <unique> <leader>ve :call exUtility#EditVimEntry ()<CR>
}}}

== Add New Languages ==
--------------------------------------------------------------------------------------

=== Add New exVim Language Maps ===

The default languages support by exVim shows in the table below:

|| *Language Type* || *File Type* ||
||asm ||asm, ASM ||
||awk ||awk, gawk, mawk ||
||batch ||bat ||
||c ||c, C ||
||cpp ||c++, cc, cp, cpp, cxx, h, H, h++, hh, hp, hpp, hxx, inl, ipp ||
||c# ||cs ||
||doxygen ||dox, doxygen ||
||debug ||log, err, exe ||
||html ||htm, html ||
||ini ||ini, cfg ||
||java ||java ||
||javascript ||js ||
||lua ||lua ||
||make ||mak, mk, Makefile, makefile ||
||math ||m ||
||python ||py, pyw, pyx, pxd ||
||ruby ||rb, ruby ||
||sh ||sh, SH, bsh, bash, ksh, zsh ||
||shader ||hlsl, vsh, psh, fx, fxh, cg, shd, glsl ||
||uc ||uc ||
||vim ||vim ||
||wiki ||wiki ||
||xml ||xml ||

The table will affect the exProject file filter, quick_gen_project script in exVim. 
When you set the `LangType` in vimentry to "auto", the exVim will get the "Language Type"
through the "File Type" provided by exProject file filter. When the `LangType` is set
to some specific languages (e.g. `LangType=c,cpp,python`), then the exVim will look up
the "File Type" and apply them to the exProject file filter and quick_gen_project script. 

To Add a new language map, you can use:

{{{
function exUtility#AddLangMap( langmap_type, lang_type, file_type_list )
}}}

 # "langmap_type" controlls the maps you operated. The value could be "exvim" and "ctags", I'll explain the 'ctags' later, here we choose 'exvim'
 # "lang_type" is the language type you want to add your file type list in. If the "lang_type" is not in the default language maps, it will create a new one.
 # "file_type_list" is a list carries the file types you want to add. If the file type already exists, the function will skip it.

Here is a example to add filetype 'as' into language 'javascript' 

{{{
call exUtility#AddLangMap ( 'exvim', 'javascript', ['as'] )
}}}

You can use the function:

{{{
function exUtility#ResetLangMap( langmap_type, lang_type, file_type_list )
}}}

To reset a language type mapping. It will overwrite the exists one with the new file type list.

=== Add New ctags Language Maps ===

The ctags have its own language mappings as show as below:

|| *Language Type* || *File Type* ||
||asm ||asm, ASM, s, S, A51 ||
||asp ||asp, asa ||
||awk ||awk, gawk, mawk ||
||basic ||bas, bi, bb, pb ||
||beta ||bet ||
||c ||c ||
||cpp ||c++, cc, cp, cpp, cxx, h, h++, hh, hp, hpp, hxx ||
||c# ||cs ||
||cobol ||cbl, cob, CBL, COB ||
||eiffel ||e ||
||erlang ||erl, ERL, hrl, HRL ||
||fortran ||fo, ft, f7, f9, f95 ||
||html ||htm, html ||
||java ||java ||
||javascript ||js ||
||lisp ||cl, clisp, el, l, lisp, lsp, ml ||
||lua ||lua ||
||make ||mak, mk, Makefile, makefile ||
||pascal ||p, pas ||
||perl ||pl, pm, plx, perl ||
||php ||php, php3, phtml ||
||python ||py, pyx, pxd, scons ||
||rexx ||cmd, rexx, rx ||
||ruby ||rb, ruby ||
||scheme ||SCM, SM, sch, scheme, scm, sm ||
||sh ||sh, SH, bsh, bash, ksh, zsh ||
||slang ||sl ||
||sml ||sml, sig ||
||sql ||sql ||
||tcl ||tcl, tk, wish, itcl ||
||vera ||vr, vri, vrh ||
||verilog ||v ||
||vim ||vim ||
||yacc ||y ||

The ctags provide several options to let user add new language or file type. In exVim, since we
generate the ctags options automatically, the user need to specific their new language mappings
manually by use: 

{{{
function exUtility#AddLangMap( langmap_type, lang_type, file_type_list )
}}}

With the first parameter langmap_type to 'ctags'.  

After that, exVim will compare these two maps, and decide how to write the options in quick_gen_project script.

=== Let cscope support new file type ===

The cscope is used to analysis c pgrogramme. People sometimes use it in cpp or asm programme. To make cscope support
additional language in exVim, you need to add new language type in list g:ex_cscope_langs. The default is:

{{{
let g:ex_cscope_langs = ['c', 'cpp', 'shader', 'asm' ] 
}}}

